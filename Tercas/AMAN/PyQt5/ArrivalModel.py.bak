from PyQt5.QtCore import ( Qt, QModelIndex, QAbstractTableModel )
from pyflightdata import FlightData
import json
import datetime

import acft_details



class ArrivalModel(QAbstractTableModel):

    # Roles definitions
    #
    FlightIATARole  = Qt.UserRole + 1
    FlightICAORole  = Qt.UserRole + 2
    ICAODEPRole     = Qt.UserRole + 3
    ACFTRole        = Qt.UserRole + 4
    ETARole         = Qt.UserRole + 5
    ETAUTCRole      = Qt.UserRole + 6
    ETAUTCHourRole  = Qt.UserRole + 7
    GroundSpeedRole = Qt.UserRole + 8

    _roleNames = { FlightIATARole:  b"flight_iata",
                   FlightICAORole:  b"flight_icao",
                   ICAODEPRole:     b"icao_dep",
                   ACFTRole:        b"acft",
                   ETARole:         b"eta",
                   ETAUTCRole:      b"eta_utc",
                   ETAUTCHourRole:  b"eta_utc_hour",
                   GroundSpeedRole: b"ground_speed" }

    # Private variables definitions
    #
    _fapi    = None
    _iataARR = None # Aerodrome IATA index
    _arrivals = []


    def __init__(self, iataArr, parent = None):
        super(ArrivalModel, self).__init__(parent)

        self._iataARR = iataArr

        self._fapi = FlightData()
        try:
            self._fapi.login('odira@mail.ru', 'monrepo1')
            print('Logged in seccesfully...')
            self.update()
            print('Arrival Queue created.')

        except:
            print('Logged in failed.')


    def roleNames(self):
        return self._roleNames


    def flags(self, index):
        return Qt.ItemIsEditable | Qt.ItemIsEnabled


    def columnCount(self, parent = QModelIndex()):
        return len(self._roleNames)


    def rowCount(self, parent = QModelIndex()):
        return len(self._arrivals)


    def data(self, index, role = Qt.DisplayRole):
        if not index.isValid():
            return QVariant()

        row = index.row()
        col = role - Qt.UserRole - 1
        return self._arrivals[row][col]


    def update(self):

        self._arrivals = []

        arrivals = self._fapi.get_airport_arrivals(self._iataARR)
        arrivals = json.loads(json.dumps(arrivals))
        arrivals = sorted(arrivals, key=lambda k: k['flight']['time']['other']['eta'], reverse=True)
        arrivals = arrivals[::-1]

        for arrival in arrivals:
            live = arrival['flight']['status']['live']

            if bool(live) is True:
                flight_iata = arrival['flight']['identification']['number']['default'] # IATA flight code
                flight_icao = arrival['flight']['identification']['callsign'] # ICAO flight code
                dep_icao = arrival['flight']['airport']['origin']['code']['icao'] # ICAO departure airport code

                if arrival['flight']['aircraft'] == 'None':
                    acft = 'None'
                else:
                    acft = arrival['flight']['aircraft']['model']['code'] # ACFT code

                eta = arrival['flight']['status']['text'] # ETA local time
                eta_utc = arrival['flight']['time']['estimated']['arrival'] # ETA UTC
                if eta_utc == 'None':
                    eta_utc = '0'

                if arrival['flight']['airline'] == 'None':
                    airline_icao = 'None'
                else:
                    airline_icao = arrival['flight']['airline']['code']['icao']

                if (eta.find('Estimated') != -1):
                    ground_speed = acft_details.get_ground_speed(flight_icao, airline_icao)
#                    ground_speed = 500
                    arrival = [ flight_iata,
                                flight_icao,
                                dep_icao,
                                acft,
                                str(eta),
                                int(eta_utc),
                                datetime.datetime.utcfromtimestamp(int(eta_utc)).hour,
                                ground_speed ]

                    self.addArrival(arrival)


    def addArrival(self, arrival):
        self.beginInsertRows(QModelIndex(), self.rowCount(), self.rowCount())
        self._arrivals.append(arrival)
        self.endInsertRows()
